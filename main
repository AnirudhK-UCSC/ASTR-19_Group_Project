import numpy as np
import matplotlib.pyplot as plt
from scipy import optimize
import tensorflow as tf
print(tf.__version__)


data = np.genfromtxt("ASTR19_F24_group_project_data.txt", dtype=('i8','U6','f8'))

day = []
time = []
height = []

for i in range(len(data)):
    day.append(data[i][0])
    time.append(data[i][1])
    height.append(data[i][2])
    
print(day)
print(time)
print(height)



timehour = []
timemin = []
timehourdec = []
timemindec = []
timepercent = []
x = []
for i in range(len(time)):
    splittime = time[i].split(':')
    timehour.append(splittime[0])
    timehourdec.append(float(splittime[0])/24)
    timemin.append(splittime[1])
    timemindec.append(float(splittime[1])/1440)
    timepercent.append(timehourdec[i]+timemindec[i])
    x.append(timepercent[i]+day[i])

print(x)

x = np.asarray(x).astype(np.float32)



plt.plot(x,height, '-o')
plt.xlabel('Time (days)')
plt.ylabel('Tide Height (ft.)')



A_init = 2.9145562648773193
A_fit = tf.Variable(A_init)
B_init = 0.45006895065307617
B_fit = tf.Variable(B_init)
C_init = 0.2865771949291229
C_fit = tf.Variable(C_init)
D_init = 1.1557908058166504
D_fit = tf.Variable(D_init)
E_init = 30.130300521850586
E_fit = tf.Variable(E_init)
F_init = -1.0028715133666992
F_fit = tf.Variable(F_init)
G_init = 2.4069228172302246
G_fit = tf.Variable(G_init)



@tf.function
def model(x):
    return (A_fit * tf.math.sin(B_fit * x + C_fit) + D_fit) * tf.math.sin(E_fit * x + F_fit) + G_fit



@tf.function
def mse(y_true, y_pred):
    return tf.losses.mean_squared_error(y_true,y_pred)



optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)



epochs = 30000 #number of epochs to run
display_step = 1000 #number of epochs between printing info to screen

for epoch in range(epochs):
    #monitor training/display steps
    if((epoch%display_step)==0):
        pred = model(x)
        loss = mse(pred, height)

        #To print this info, we need to convert to numpy arrays
        print(f"Epoch {epoch} | Loss {loss.numpy()}, A: {A_fit.numpy()}, B: {B_fit.numpy()}, C: {C_fit.numpy()}, D: {D_fit.numpy()}, E: {E_fit.numpy()}, F: {F_fit.numpy()}, G: {G_fit.numpy()}")

    #In TF2, gradients are handled using the GradientTape class. Begin GradientTape and optimize
    with tf.GradientTape() as g:
        pred = model(x)
        loss = mse(height,pred)

    #Compute dm, db, the gradients with respect to m_fit and b_fit
    gradients = g.gradient(loss, [A_fit,B_fit,C_fit,D_fit,E_fit,F_fit,G_fit])

    #update m_fit and b_fit with the gradients x learning
    optimizer.apply_gradients(zip(gradients,[A_fit,B_fit,C_fit,D_fit,E_fit,F_fit,G_fit]))

print(f"Epoch {epoch} | Loss {loss.numpy()}, A: {A_fit.numpy()}, B: {B_fit.numpy()}, C: {C_fit.numpy()}, D: {D_fit.numpy()}, E: {E_fit.numpy()}, F: {F_fit.numpy()}, G: {G_fit.numpy()}")
print("Done!")



def model_fit(x, a, b, c, d, e, f, g):
    return (a * np.sin(b*np.array(x) + c) + d) * np.sin(e*np.array(x) + f) + g

y_fit = model_fit(x,A_fit,B_fit,C_fit,D_fit,E_fit,F_fit,G_fit)
residuals = height - y_fit


f = plt.figure(figsize=(7,7))
plt.plot(x,height,'-o',label="data")
plt.plot(x,y_fit,label="fit")
plt.xlabel('Time (days)')
plt.ylabel('Tide Height (ft.)')
plt.legend(loc=0,frameon=False)
plt.savefig("fitmodel.pdf",bbox_inches="tight",facecolor="white")


f = plt.figure(figsize=(7,7))
plt.plot(x,height,'-o',label="data")
plt.plot(x,y_fit,label="fit")
plt.xlabel('Time (days)')
plt.ylabel('Tide Height (ft.)')
plt.legend(loc=0,frameon=False)

# Plot residuals
plt.figure(figsize=(10, 6))
plt.plot(x, residuals, 'o', label="Residuals")
plt.axhline(0, color='red', linestyle='--')
plt.xlabel('Time (days)')
plt.ylabel('Residuals (ft.)')
plt.title('Residuals of the Fit')
plt.savefig("residuals_plot.pdf")
plt.show()


# Histogram residuals
plt.figure(figsize=(10, 6))
plt.hist(residuals, bins=20, alpha=0.7, edgecolor='black')
plt.xlabel('Residuals (ft.)')
plt.ylabel('Frequency')
plt.title('Histogram of Residuals')
plt.savefig("residuals_histogram.pdf")
plt.show()
plt.figure(figsize=(8, 6))
plt.plot(x, height, 'o', label="Measured Data", markersize=4)
plt.plot(x, y_fit, '-', label="Fitted Model")
plt.xlabel('Time (days)', fontsize=14)
plt.ylabel('Tide Height (ft)', fontsize=14)
plt.title('Tidal Measurements vs Fitted Model', fontsize=16)
plt.legend(fontsize=12)
plt.grid()
plt.savefig("tidal_model_fit.pdf")
plt.show()


residual_std = np.std(residuals)
assumed_error = 0.25
intrinsic_scatter = np.sqrt(residual_std**2 - assumed_error**2)

print(f"Residual standard deviation: {residual_std:.3f}")
print(f"Intrinsic scatter: {intrinsic_scatter:.3f}")


# Add tsunami event to dataset
tsunami_height = 2.0
tsunami_time = 14  
tsunami_x = tsunami_time
tsunami_residual = tsunami_height - model_fit(x,A_fit,B_fit,C_fit,D_fit,E_fit,F_fit,G_fit)


# Add to residuals
residuals_with_outlier = np.append(residuals, tsunami_residual)


# Histogram
plt.figure(figsize=(10, 6))
plt.hist(residuals_with_outlier, bins=20, alpha=0.7, edgecolor='black', label="Residuals with Outlier")
plt.xlabel('Residuals (ft.)')
plt.ylabel('Frequency')
plt.title('Histogram of Residuals with Tsunami Event')
plt.legend()
plt.savefig("updated_residuals_histogram.pdf")
plt.show()

# Standard deviations for tsunami
tsunami_deviation = tsunami_residual / residual_std
